name: Security Scanning

on:
  schedule:
    # Run security scans every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.jsx'
      - '**/*.tsx'

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: |
        npm audit --production --audit-level=moderate
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      with:
        args: --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true
      
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
        
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  container-scanning:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t blessed-horizon:${{ github.sha }} .
      continue-on-error: true
      
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'blessed-horizon:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true
      
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Checkov Infrastructure Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: true
        framework: terraform,cloudformation,kubernetes,serverless
        output_format: sarif
        output_file_path: reports/checkov.sarif
        
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/checkov.sarif
        
  api-security-scan:
    name: API Security Testing
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: OWASP ZAP API Scan
      uses: zaproxy/action-api-scan@v0.4.0
      with:
        target: 'https://staging.blessed-horizon.com/api'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
      continue-on-error: true
      
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, codeql-analysis, secret-scanning, container-scanning, infrastructure-scan, api-security-scan]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate consolidated report
      run: |
        echo "# Security Scan Report - $(date)" > security-report.md
        echo "" >> security-report.md
        echo "## Summary" >> security-report.md
        echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> security-report.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
        echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-report.md
        echo "- Container Scanning: ${{ needs.container-scanning.result }}" >> security-report.md
        echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
        echo "- API Security: ${{ needs.api-security-scan.result }}" >> security-report.md
        
    - name: Create issue if vulnerabilities found
      if: contains(needs.*.result, 'failure')
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `Security vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`;
          const body = `Security scans have detected potential vulnerabilities. Please review the [security scan results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          
          **Scan Results:**
          - Dependency Audit: ${{ needs.dependency-audit.result }}
          - CodeQL Analysis: ${{ needs.codeql-analysis.result }}
          - Secret Scanning: ${{ needs.secret-scanning.result }}
          - Container Scanning: ${{ needs.container-scanning.result }}
          - Infrastructure Scan: ${{ needs.infrastructure-scan.result }}
          - API Security: ${{ needs.api-security-scan.result }}
          
          Please address these issues as soon as possible.`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'high-priority']
          });
