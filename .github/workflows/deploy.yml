name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8'

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check deployment conditions
      id: check
      run: |
        # Check if last commit is a merge commit
        if git log -1 --pretty=%B | grep -q "Merge pull request"; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi
        
  deploy-supabase:
    name: Deploy Supabase Functions
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Deploy Edge Functions
      run: |
        supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        supabase functions deploy --verify-jwt
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Run database migrations
      run: |
        supabase db push
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
  build-and-deploy:
    name: Build and Deploy Application
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, deploy-supabase]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build application
      run: pnpm build
      env:
        NODE_ENV: production
        VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        VITE_APP_VERSION: ${{ github.sha }}
        VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        
    - name: Deploy to Vercel
      id: deploy-vercel
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        alias-domains: |
          blessed-horizon.com
          www.blessed-horizon.com
          
    - name: Deploy to Cloudflare Pages (Backup)
      if: failure()
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: blessed-horizon
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Invalidate CloudFlare cache
      run: |
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data '{"purge_everything":true}'
          
    - name: Update deployment status
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: '${{ github.event.inputs.environment || 'production' }}',
            description: 'Deployed to production',
            production_environment: true,
            required_contexts: []
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: 'https://blessed-horizon.com',
            description: 'Deployment successful'
          });
          
    - name: Notify team on Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          :rocket: *Production Deployment Successful*
          
          *Version:* `${{ github.sha }}`
          *Deployed by:* ${{ github.actor }}
          *Environment:* ${{ github.event.inputs.environment || 'production' }}
          *URL:* https://blessed-horizon.com
          
          View deployment: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: ${{ github.event.inputs.environment || 'production' }}
        version: ${{ github.sha }}
        
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: post-deploy
    if: success()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd test/smoke
        npm install
        
    - name: Run smoke tests
      run: |
        cd test/smoke
        npm run test:production
      env:
        PRODUCTION_URL: https://blessed-horizon.com
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Smoke tests failed! Initiating rollback..."
        # Add rollback logic here
